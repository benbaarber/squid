@startuml Squid
!pragma teoz true
skinparam SequenceMessageAlignment direction

title Squid

actor Client
participant Server
participant Broker
collections Manager
collections Worker

== Topology ==
Server <-> Broker: DEALER <> DEALER
& Broker <-> Manager: PUB <> SUB
Client <--> Server: HTTP / Websocket
& Manager --> Worker ++ : Spawn process
Broker <--> Worker: ROUTER <> DEALER
Worker --> Worker !! : Kill self

== Detailed Workflow ==
Client -> Client: Build docker image from\nexperiment directory
note right
Extend the Worker environment
image with the directory containing
the executable and Worker config.
end note
[<- Client: Push task image to\nregistry
Client -> Server: HTTP\nNew experiment request
note right: Specifies Worker container\nand config.
Server -> Broker: DEALER\nRelay experiment request

Broker -> Manager: PUB\nBroadcast experiment request
Broker -> Broker ++ : Start polling ROUTER
[-> Manager: Pull task image
Manager -> Worker ++ : Start containerized Workers
note right: For each core on the host
Worker -> Broker: DEALER\nSend ready signal

loop for each generation (sync)
  loop for each agent (async)
    Broker --> Worker ++ : ROUTER\nReply with agent for Worker
    Worker -> Worker: Run Worker
    Worker -> Broker -- : DEALER\nSend results and request another
    Broker -> Server: DEALER\nUpdate server with progress
    Server -> Client: Websocket\nParse progress for UI and relay
  end
  Broker -> Broker: GA evolution step
end

Broker --> Worker !! : ROUTER\nSend kill signal
Broker --> Broker -- : Stop polling ROUTER
Broker -> Server: DEALER\nSend done signal & summary
Server -> Server: Save experiment to DB
Server -> Client: Websocket\nRelay info

@enduml